import {
  IBreakpoints,
  ITheme,
  IThemeWithoutBreakpoints,
  theme,
  themeWithoutBreakpoints,
} from '../../../test-utils/theme';

import { __PROPERTY_NAME__ } from '../__PROPERTY_NAME__';

describe('__PROPERTY_NAME__', () => {
  it('should return a function', () => {
    const result = __PROPERTY_NAME__();
    expect(result).toBeInstanceOf(Function);
  });

  it('should use `__PROPERTY_NAME__` as component and css prop', () => {
    const result = __PROPERTY_NAME__()({ __PROPERTY_NAME__: 'inherit' });
    expect(result).toEqual({ __PROPERTY_NAME__: 'inherit' });
  });

  it('should allow using a custom value type', () => {
    const result = __PROPERTY_NAME__<'a'>()({ __PROPERTY_NAME__: 'a' });
    expect(result).toEqual({ __PROPERTY_NAME__: 'a' });
  });

  it('should allow using a theme', () => {
    const result = __PROPERTY_NAME__<'value', IThemeWithoutBreakpoints>({
      themeProp: 'dummy',
    })({ __PROPERTY_NAME__: 'value', theme: themeWithoutBreakpoints });
    expect(result).toEqual({
      __PROPERTY_NAME__: themeWithoutBreakpoints.dummy.value,
    });
  });

  it('should allow using breakpoints', () => {
    const result = __PROPERTY_NAME__<
      'a' | 'b' | 'c' | 'd',
      ITheme,
      IBreakpoints
    >()({
      __PROPERTY_NAME__: {
        base: 'a',
        large: 'b',
        medium: 'c',
        small: 'd',
      },
      theme,
    });
    expect(result).toEqual({
      __PROPERTY_NAME__: 'a',
      [theme.breakpoints.large]: {
        __PROPERTY_NAME__: 'b',
      },
      [theme.breakpoints.medium]: {
        __PROPERTY_NAME__: 'c',
      },
      [theme.breakpoints.small]: {
        __PROPERTY_NAME__: 'd',
      },
    });
  });
});
